var searchIndex = {};
searchIndex['bio'] = {"items":[[0,"","bio","# Rust-bio, a rusty bioinformatics library.",null,null],[0,"utils","","Common utilities.",null,null],[5,"trim_newline","bio::utils","",null,{"inputs":[{"name":"string"}],"output":null}],[5,"scan","","Inplace implementation of scan over a slice.",null,null],[5,"prescan","","",null,null],[0,"alphabets","bio","Handling different alphabets.",null,null],[3,"Alphabet","bio::alphabets","Representation of an alphabet.",null,null],[12,"symbols","","",0,null],[3,"RankTransform","","Tools based on transforming the alphabet symbols to their lexicographical ranks.",null,null],[12,"ranks","","",1,null],[3,"QGrams","","Iterator over q-grams.",null,null],[0,"dna","","",null,null],[3,"RevComp","bio::alphabets::dna","",null,null],[5,"alphabet","","Obtain the DNA alphabet.",null,{"inputs":[],"output":{"name":"alphabet"}}],[5,"n_alphabet","","",null,{"inputs":[],"output":{"name":"alphabet"}}],[5,"iupac_alphabet","","Obtain the IUPAC DNA alphabet",null,{"inputs":[],"output":{"name":"alphabet"}}],[11,"new","","",2,{"inputs":[{"name":"revcomp"}],"output":{"name":"revcomp"}}],[11,"comp","","",2,{"inputs":[{"name":"revcomp"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"get","","Calculate the reverse complement of given text.\nThe text has to be in DNA alphabet containing only ACGTacgt symbols.\nOther symbols won't be converted.",2,null],[0,"protein","bio::alphabets","Handling the protein alphabet.",null,null],[5,"alphabet","bio::alphabets::protein","Returns the standard protein alphabet, containing the 20 common amino acids.",null,{"inputs":[],"output":{"name":"alphabet"}}],[6,"SymbolRanks","bio::alphabets","",null,null],[11,"new","","Create new alphabet from given symbols.",0,null],[11,"from_iter","","",0,{"inputs":[{"name":"alphabet"},{"name":"i"}],"output":{"name":"alphabet"}}],[11,"insert","","Insert symbol into alphabet.",0,{"inputs":[{"name":"alphabet"},{"name":"u8"}],"output":null}],[11,"is_word","","Check if given text is a word over the alphabet.",0,null],[11,"max_symbol","","Return lexicographically maximal symbol.",0,{"inputs":[{"name":"alphabet"}],"output":{"name":"option"}}],[11,"len","","Return size of the alphabet.",0,{"inputs":[{"name":"alphabet"}],"output":{"name":"usize"}}],[11,"new","","Construct a new `RankTransform`.",1,{"inputs":[{"name":"ranktransform"},{"name":"alphabet"}],"output":{"name":"ranktransform"}}],[11,"get","","Get the rank of symbol `a`.",1,{"inputs":[{"name":"ranktransform"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"transform","","Transform a given `text`.",1,null],[11,"qgrams","","Iterate over q-grams (substrings of length q) of given `text`. The q-grams are encoded\nas `usize` by storing the symbol ranks in log2(|A|) bits (with |A| being the alphabet size).",1,null],[11,"alphabet","","Restore alphabet from transform.",1,{"inputs":[{"name":"ranktransform"}],"output":{"name":"alphabet"}}],[6,"Item","","",null,null],[11,"next","","",3,{"inputs":[{"name":"qgrams"}],"output":{"name":"option"}}],[0,"pattern_matching","bio","This module contains various useful pattern matching algorithms.\nThe implementations are based on the lecture notes\n\"Algorithmen auf Sequenzen\", Kopczynski, Marschall, Martin and Rahmann, 2008 - 2015.",null,null],[0,"shift_and","bio::pattern_matching","ShiftAnd algorithm for pattern matching.\nPatterns may contain at most 64 symbols.\nComplexity: O(n) with text length n.",null,null],[3,"ShiftAnd","bio::pattern_matching::shift_and","",null,null],[3,"ShiftAndMatches","","",null,null],[5,"masks","","",null,null],[11,"new","","Create new ShiftAnd instance.",4,null],[11,"find_all","","Find all occurences of pattern in the given text.",4,{"inputs":[{"name":"shiftand"},{"name":"i"}],"output":{"name":"shiftandmatches"}}],[6,"Item","","",null,null],[11,"next","","",5,{"inputs":[{"name":"shiftandmatches"}],"output":{"name":"option"}}],[0,"kmp","bio::pattern_matching","Algorithm of Knuth Morris and Pratt.\nConstructs an automaton recognizing the pattern, and scans linearly over\na text of length n. Complexity: O(n).\nThe transition function delta is simulated via the lps-function, that assigns to each position\nq in the pattern the longest prefix of the pattern that is suffix of pattern[..q+1].\nThen, in the NFA for the pattern, active states after reading position q are\n{q, lps(q), lps(lps(q)), ... 0}.",null,null],[3,"KMP","bio::pattern_matching::kmp","",null,null],[3,"KMPMatches","","",null,null],[11,"new","","",6,null],[11,"find_all","","",6,{"inputs":[{"name":"kmp"},{"name":"i"}],"output":{"name":"kmpmatches"}}],[6,"Item","","",null,null],[11,"next","","",7,{"inputs":[{"name":"kmpmatches"}],"output":{"name":"option"}}],[0,"bom","bio::pattern_matching","Backward oracle matching algorithm.\nBest-case complexity: O(n / m) with pattern of length m and text of length n.\nWorst case complexity: O(n * m).",null,null],[3,"BOM","bio::pattern_matching::bom","",null,null],[3,"BOMMatches","","",null,null],[11,"new","","",8,null],[11,"find_all","","Find all exact occurrences of the pattern in the given text.",8,null],[6,"Item","","",null,null],[11,"next","","",9,{"inputs":[{"name":"bommatches"}],"output":{"name":"option"}}],[0,"horspool","bio::pattern_matching","Algorithm of Horspool.\nWindow-based, similar to but faster than Boyer-Moore.",null,null],[3,"Horspool","bio::pattern_matching::horspool","",null,null],[3,"HorspoolMatches","","",null,null],[11,"new","","",10,null],[11,"find_all","","",10,null],[6,"Item","","",null,null],[11,"next","","",11,{"inputs":[{"name":"horspoolmatches"}],"output":{"name":"option"}}],[0,"bndm","bio::pattern_matching","Backward nondeterministic DAWG matching (BNDM).\nBest-case complexity: O(n / m) with pattern of length m <= 64 and text of length n.\nWorst case complexity: O(n * m).",null,null],[3,"BNDM","bio::pattern_matching::bndm","",null,null],[3,"BNDMMatches","","",null,null],[11,"new","","",12,null],[11,"find_all","","",12,null],[6,"Item","","",null,null],[11,"next","","",13,{"inputs":[{"name":"bndmmatches"}],"output":{"name":"option"}}],[0,"ukkonen","bio::pattern_matching","Bounded version of Ukkonens DP algorithm for approximate pattern matching.\nComplexity: O(n * k) on random texts.",null,null],[3,"Ukkonen","bio::pattern_matching::ukkonen","",null,null],[3,"Matches","","",null,null],[5,"unit_cost","","",null,{"inputs":[{"name":"u8"},{"name":"u8"}],"output":{"name":"u32"}}],[11,"with_capacity","","",14,{"inputs":[{"name":"ukkonen"},{"name":"usize"},{"name":"f"}],"output":{"name":"ukkonen"}}],[11,"find_all_end","","Find all matches between pattern and text with up to k errors.\nMatches are returned as pairs of end position and errors.",14,null],[6,"Item","","",null,null],[11,"next","","",15,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[0,"data_structures","bio","Various useful data structures.",null,null],[0,"rank_select","bio::data_structures","Rank/Select data structure based on Gonzalez, Grabowski, MÃ¤kinen, Navarro (2005).\nThis implementation uses only a single level of blocks, and performs well for large n.",null,null],[3,"RankSelect","bio::data_structures::rank_select","",null,null],[11,"new","","Create a new instance.",16,{"inputs":[{"name":"rankselect"},{"name":"bitvec"},{"name":"usize"}],"output":{"name":"rankselect"}}],[11,"rank","","Get the rank of a given bit, i.e. the number of 1-bits in the bitvector up to i (inclusive).\nComplexity: O(k).",16,{"inputs":[{"name":"rankselect"},{"name":"usize"}],"output":{"name":"option"}}],[11,"select","","Get the smallest bit with a given rank.\nComplexity: O(log (n / k) + k).",16,{"inputs":[{"name":"rankselect"},{"name":"u32"}],"output":{"name":"option"}}],[0,"suffix_array","bio::data_structures","Suffix arrays and related algorithms.\nThe implementation is based on the lecture notes\n\"Algorithmen auf Sequenzen\", Kopczynski, Marschall, Martin and Rahmann, 2008 - 2015.",null,null],[5,"suffix_array","bio::data_structures::suffix_array","Construct suffix array for given text of length n.\nComplexity: O(n).\nThis is an implementation of the induced sorting as presented by \nGe Nong, Sen Zhang und Wai Hong Chan (2009), also known as SAIS.\nThe implementation is based on the following lecture notes:\nhttp://ls11-www.cs.tu-dortmund.de/people/rahmann/algoseq.pdf",null,null],[5,"lcp","","Construct lcp array for given text and suffix array of length n.\nComplexity: O(n).",null,null],[6,"SuffixArray","","",null,null],[6,"LCPArray","","",null,null],[0,"bwt","bio::data_structures","The Burrows-Wheeler-Transform and related data structures.\nThe implementation is based on the lecture notes\n\"Algorithmen auf Sequenzen\", Kopczynski, Marschall, Martin and Rahmann, 2008 - 2015.",null,null],[3,"Occ","bio::data_structures::bwt","",null,null],[5,"bwt","","Calculate Burrows-Wheeler-Transform of the given text of length n.\nComplexity: O(n).",null,null],[5,"invert_bwt","","Calculate the inverse of a BWT of length n, which is the original text.\nComplexity: O(n).",null,{"inputs":[{"name":"bwt"}],"output":{"name":"vec"}}],[5,"less","","",null,{"inputs":[{"name":"bwt"},{"name":"alphabet"}],"output":{"name":"less"}}],[5,"bwtfind","","Calculate the bwtfind array needed for inverting the BWT.",null,{"inputs":[{"name":"bwt"},{"name":"alphabet"}],"output":{"name":"bwtfind"}}],[6,"BWT","","",null,null],[6,"Less","","",null,null],[6,"BWTFind","","",null,null],[11,"new","","Calculate occ array with sampling from BWT of length n.\nTime complexity: O(n).\nSpace complexity: O(n / k * A) with A being the alphabet size.\nAlphabet size is determined on the fly from the BWT.\nFor large texts, it is therefore advisable to transform\nthe text before calculating the BWT (see alphabets::rank_transform).",17,{"inputs":[{"name":"occ"},{"name":"bwt"},{"name":"usize"},{"name":"alphabet"}],"output":{"name":"occ"}}],[11,"get","","Get occurrence count of symbol a in BWT[..r+1].\nComplexity: O(k).",17,{"inputs":[{"name":"occ"},{"name":"bwt"},{"name":"usize"},{"name":"u8"}],"output":{"name":"usize"}}],[0,"bitenc","bio::data_structures","A fixed-width bit encoding implementation.",null,null],[3,"BitEnc","bio::data_structures::bitenc","",null,null],[3,"BitEncIter","","",null,null],[11,"new","","",18,{"inputs":[{"name":"bitenc"},{"name":"usize"}],"output":{"name":"bitenc"}}],[11,"with_capacity","","",18,{"inputs":[{"name":"bitenc"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bitenc"}}],[11,"push","","",18,{"inputs":[{"name":"bitenc"},{"name":"u8"}],"output":null}],[11,"push_values","","",18,{"inputs":[{"name":"bitenc"},{"name":"usize"},{"name":"u8"}],"output":null}],[11,"set","","",18,{"inputs":[{"name":"bitenc"},{"name":"usize"},{"name":"u8"}],"output":null}],[11,"get","","",18,{"inputs":[{"name":"bitenc"},{"name":"usize"}],"output":{"name":"option"}}],[11,"iter","","",18,{"inputs":[{"name":"bitenc"}],"output":{"name":"bitenciter"}}],[11,"clear","","",18,{"inputs":[{"name":"bitenc"}],"output":null}],[11,"len","","",18,{"inputs":[{"name":"bitenc"}],"output":{"name":"usize"}}],[6,"Item","","",null,null],[11,"next","","",19,{"inputs":[{"name":"bitenciter"}],"output":{"name":"option"}}],[0,"smallints","bio::data_structures","A data structure for a sequence of small integers with a few big integers.\nSmall ints are stored in type S (e.g. a byte), big ints are stored separately (in type B) in a BTree.",null,null],[3,"SmallInts","bio::data_structures::smallints","",null,null],[3,"Iter","","",null,null],[11,"new","","",20,{"inputs":[{"name":"smallints"}],"output":{"name":"smallints"}}],[11,"with_capacity","","",20,{"inputs":[{"name":"smallints"},{"name":"usize"}],"output":{"name":"smallints"}}],[11,"from_elem","","",20,{"inputs":[{"name":"smallints"},{"name":"s"},{"name":"usize"}],"output":{"name":"smallints"}}],[11,"get","","",20,{"inputs":[{"name":"smallints"},{"name":"usize"}],"output":{"name":"option"}}],[11,"push","","",20,{"inputs":[{"name":"smallints"},{"name":"b"}],"output":null}],[11,"set","","",20,{"inputs":[{"name":"smallints"},{"name":"usize"},{"name":"b"}],"output":null}],[11,"iter","","",20,{"inputs":[{"name":"smallints"}],"output":{"name":"iter"}}],[11,"decompress","","",20,{"inputs":[{"name":"smallints"}],"output":{"name":"vec"}}],[11,"len","","",20,{"inputs":[{"name":"smallints"}],"output":{"name":"usize"}}],[6,"Item","","",null,null],[11,"next","","",21,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[0,"fmindex","bio::data_structures","The Ferragina-Mancini Index for finding suffix array intervals matching a given pattern.",null,null],[3,"Interval","bio::data_structures::fmindex","",null,null],[3,"FMIndex","","",null,null],[3,"BiInterval","","",null,null],[3,"FMDIndex","","",null,null],[11,"occ","","Return the occurrence positions of the pattern as a slice of the suffix array.",22,null],[11,"new","","Construct a new instance of the FM index.",23,{"inputs":[{"name":"fmindex"},{"name":"bwt"},{"name":"usize"},{"name":"alphabet"}],"output":{"name":"fmindex"}}],[11,"backward_search","","Perform backward search, yielding suffix array\ninterval denoting exact occurences of the given pattern of length m in the text.\nComplexity: O(m).",23,{"inputs":[{"name":"fmindex"},{"name":"p"}],"output":{"name":"interval"}}],[11,"fmt","","",24,{"inputs":[{"name":"biinterval"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"occ","","Return the occurrence positions of the pattern as a slice of the suffix array.",24,null],[11,"occ_revcomp","","Return the occurrence positions of the reverse complement of the pattern as a slice of the suffix array.",24,null],[11,"new","","Construct a new instance of the FMD index (see Heng Li (2012) Bioinformatics).\nThis expects a BWT that was created from a text over the DNA alphabet with N\n(`alphabets::dna::n_alphabet()`) consisting of the\nconcatenation with its reverse complement, separated by the sentinel symbol `$`.\nI.e., let T be the original text and R be its reverse complement.\nThen, the expected text is T$R$. Further, multiple concatenated texts are allowed, e.g.\nT1$R1$T2$R2$T3$R3$.",25,{"inputs":[{"name":"fmdindex"},{"name":"bwt"},{"name":"usize"}],"output":{"name":"fmdindex"}}],[11,"smems","","Find supermaximal exact matches of given pattern overlapping position i.",25,null],[0,"qgram_index","bio::data_structures","",null,null],[3,"QGramIndex","bio::data_structures::qgram_index","A classical, flexible, q-gram index implementation.",null,null],[3,"Interval","","An interval, consisting of start and stop position (the latter exclusive).",null,null],[12,"start","","",26,null],[12,"stop","","",26,null],[3,"Match","","",null,null],[12,"pattern","","",27,null],[12,"text","","",27,null],[12,"count","","",27,null],[3,"ExactMatch","","",null,null],[12,"pattern","","",28,null],[12,"text","","",28,null],[11,"new","","Create a new q-gram index.\nThe q has to be smaller than b / log2(|A|) with |A| being the alphabet size and b the number\nbits with the `usize` data type.",29,null],[11,"with_max_count","","Create a new q-gram index, only considering q-grams that occur at most `max_count` times.\nThe q has to be smaller than b / log2(|A|) with |A| being the alphabet size and b the number\nbits with the `usize` data type.",29,null],[11,"qgram_matches","","Return text positions with matching q-gram.",29,null],[11,"matches","","Return matches of the given pattern.",29,null],[11,"exact_matches","","Return exact matches of the given pattern.",29,null],[11,"eq","","",26,{"inputs":[{"name":"interval"},{"name":"interval"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"interval"},{"name":"interval"}],"output":{"name":"bool"}}],[11,"fmt","","",26,{"inputs":[{"name":"interval"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","",26,null],[11,"eq","","",27,{"inputs":[{"name":"match"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"match"},{"name":"match"}],"output":{"name":"bool"}}],[11,"fmt","","",27,{"inputs":[{"name":"match"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"exactmatch"},{"name":"exactmatch"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"exactmatch"},{"name":"exactmatch"}],"output":{"name":"bool"}}],[11,"fmt","","",28,{"inputs":[{"name":"exactmatch"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"alignment","bio","Alignment algorithms.",null,null],[3,"Alignment","bio::alignment","",null,null],[12,"score","","",30,null],[12,"ystart","","",30,null],[12,"xstart","","",30,null],[12,"xlen","","",30,null],[12,"operations","","",30,null],[4,"AlignmentOperation","","",null,null],[13,"Match","","",31,null],[13,"Subst","","",31,null],[13,"Del","","",31,null],[13,"Ins","","",31,null],[0,"pairwise","","Calculate alignments with a generalized variant of the Smith Waterman algorithm.\nComplexity: O(n * m) for strings of length m and n.",null,null],[3,"Aligner","bio::alignment::pairwise","",null,null],[11,"with_capacity","","Create new aligner instance. The size hints help to\navoid unnecessary memory allocations.",32,{"inputs":[{"name":"aligner"},{"name":"usize"},{"name":"usize"},{"name":"i32"},{"name":"i32"},{"name":"f"}],"output":{"name":"aligner"}}],[11,"global","","Calculate global alignment.",32,null],[11,"semiglobal","","Calculate semiglobal alignment.",32,null],[11,"local","","Calculate local alignment.",32,null],[11,"fmt","bio::alignment","",31,{"inputs":[{"name":"alignmentoperation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"alignmentoperation"},{"name":"alignmentoperation"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"alignmentoperation"},{"name":"alignmentoperation"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"alignment"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cigar","","",30,{"inputs":[{"name":"alignment"},{"name":"bool"}],"output":{"name":"string"}}],[0,"io","bio","Readers and writers for common bioinformatics file formats.",null,null],[0,"fastq","bio::io","FastQ reading and writing.",null,null],[3,"Reader","bio::io::fastq","A FastQ reader.",null,null],[3,"Record","","A FastQ record.",null,null],[3,"Records","","An iterator over the records of a FastQ file.",null,null],[3,"Writer","","A FastQ writer.",null,null],[11,"new","","Create a new FastQ reader.",33,{"inputs":[{"name":"reader"},{"name":"r"}],"output":{"name":"reader"}}],[11,"from_file","","",33,{"inputs":[{"name":"reader"},{"name":"p"}],"output":{"name":"result"}}],[11,"read","","Read into a given record.\nReturns an error if the record in incomplete or syntax is violated.\nThe content of the record can be checked via the record object.",33,{"inputs":[{"name":"reader"},{"name":"record"}],"output":{"name":"result"}}],[11,"records","","Return an iterator over the records of this FastQ file.",33,{"inputs":[{"name":"reader"}],"output":{"name":"records"}}],[11,"new","","Create a new, empty FastQ record.",34,{"inputs":[{"name":"record"}],"output":{"name":"record"}}],[11,"is_empty","","",34,{"inputs":[{"name":"record"}],"output":{"name":"bool"}}],[11,"check","","Check validity of FastQ record.",34,{"inputs":[{"name":"record"}],"output":{"name":"result"}}],[11,"id","","Return the id of the record.",34,{"inputs":[{"name":"record"}],"output":{"name":"option"}}],[11,"desc","","Return descriptions if present.",34,{"inputs":[{"name":"record"}],"output":{"name":"vec"}}],[11,"seq","","Return the sequence of the record.",34,null],[11,"qual","","Return the base qualities of the record.",34,null],[6,"Item","","",null,null],[11,"next","","",35,{"inputs":[{"name":"records"}],"output":{"name":"option"}}],[11,"new","","Create a new FastQ writer.",36,{"inputs":[{"name":"writer"},{"name":"w"}],"output":{"name":"writer"}}],[11,"from_file","","",36,{"inputs":[{"name":"writer"},{"name":"p"}],"output":{"name":"result"}}],[11,"write_record","","Directly write a FastQ record.",36,{"inputs":[{"name":"writer"},{"name":"record"}],"output":{"name":"result"}}],[11,"write","","Write a FastQ record with given values.",36,null],[11,"flush","","Flush the writer, ensuring that everything is written.",36,{"inputs":[{"name":"writer"}],"output":{"name":"result"}}],[0,"fasta","bio::io","Fasta reading and writing.",null,null],[3,"Reader","bio::io::fasta","",null,null],[3,"IndexedReader","","",null,null],[3,"Writer","","A Fasta writer.",null,null],[3,"Record","","",null,null],[3,"Records","","An iterator over the records of a Fasta file.",null,null],[11,"new","","Create a new FastQ reader.",37,{"inputs":[{"name":"reader"},{"name":"r"}],"output":{"name":"reader"}}],[11,"from_file","","",37,{"inputs":[{"name":"reader"},{"name":"p"}],"output":{"name":"result"}}],[11,"read","","",37,{"inputs":[{"name":"reader"},{"name":"record"}],"output":{"name":"result"}}],[11,"records","","Return an iterator over the records of this FastQ file.",37,{"inputs":[{"name":"reader"}],"output":{"name":"records"}}],[11,"new","","",38,{"inputs":[{"name":"indexedreader"},{"name":"r"},{"name":"i"}],"output":{"name":"result"}}],[11,"read_all","","",38,null],[11,"read","","",38,null],[11,"new","","Create a new Fasta writer.",39,{"inputs":[{"name":"writer"},{"name":"w"}],"output":{"name":"writer"}}],[11,"from_file","","",39,{"inputs":[{"name":"writer"},{"name":"p"}],"output":{"name":"result"}}],[11,"write_record","","Directly write a Fasta record.",39,{"inputs":[{"name":"writer"},{"name":"record"}],"output":{"name":"result"}}],[11,"write","","Write a Fasta record with given values.",39,null],[11,"flush","","Flush the writer, ensuring that everything is written.",39,{"inputs":[{"name":"writer"}],"output":{"name":"result"}}],[11,"new","","",40,{"inputs":[{"name":"record"}],"output":{"name":"record"}}],[11,"is_empty","","",40,{"inputs":[{"name":"record"}],"output":{"name":"bool"}}],[11,"check","","Check validity of Fasta record.",40,{"inputs":[{"name":"record"}],"output":{"name":"result"}}],[11,"id","","Return the id of the record.",40,{"inputs":[{"name":"record"}],"output":{"name":"option"}}],[11,"desc","","Return descriptions if present.",40,{"inputs":[{"name":"record"}],"output":{"name":"vec"}}],[11,"seq","","Return the sequence of the record.",40,null],[6,"Item","","",null,null],[11,"next","","",41,{"inputs":[{"name":"records"}],"output":{"name":"option"}}],[0,"bed","bio::io","BED reading and writing.",null,null],[3,"Reader","bio::io::bed","A BED reader.",null,null],[3,"Records","","",null,null],[3,"Writer","","A BED writer.",null,null],[3,"Record","","A BED record as defined by BEDtools (http://bedtools.readthedocs.org/en/latest/content/general-usage.html)",null,null],[4,"Strand","","",null,null],[13,"Forward","","",42,null],[13,"Reverse","","",42,null],[11,"new","","",43,{"inputs":[{"name":"reader"},{"name":"r"}],"output":{"name":"reader"}}],[11,"from_file","","",43,{"inputs":[{"name":"reader"},{"name":"p"}],"output":{"name":"result"}}],[11,"records","","",43,{"inputs":[{"name":"reader"}],"output":{"name":"records"}}],[6,"Item","","",null,null],[11,"next","","",44,{"inputs":[{"name":"records"}],"output":{"name":"option"}}],[11,"new","","",45,{"inputs":[{"name":"writer"},{"name":"w"}],"output":{"name":"writer"}}],[11,"from_file","","",45,{"inputs":[{"name":"writer"},{"name":"p"}],"output":{"name":"result"}}],[11,"write","","",45,{"inputs":[{"name":"writer"},{"name":"record"}],"output":{"name":"result"}}],[11,"encode","","",46,{"inputs":[{"name":"record"},{"name":"__s"}],"output":{"name":"result"}}],[11,"new","","",46,{"inputs":[{"name":"record"}],"output":{"name":"record"}}],[11,"chrom","","",46,{"inputs":[{"name":"record"}],"output":{"name":"str"}}],[11,"start","","Start position of feature (0-based).",46,{"inputs":[{"name":"record"}],"output":{"name":"u64"}}],[11,"end","","End position of feature (0-based, not included).",46,{"inputs":[{"name":"record"}],"output":{"name":"u64"}}],[11,"name","","",46,{"inputs":[{"name":"record"}],"output":{"name":"option"}}],[11,"score","","",46,{"inputs":[{"name":"record"}],"output":{"name":"option"}}],[11,"strand","","",46,{"inputs":[{"name":"record"}],"output":{"name":"option"}}],[11,"aux","","",46,{"inputs":[{"name":"record"},{"name":"usize"}],"output":{"name":"option"}}],[11,"set_chrom","","",46,{"inputs":[{"name":"record"},{"name":"str"}],"output":null}],[11,"set_start","","",46,{"inputs":[{"name":"record"},{"name":"u64"}],"output":null}],[11,"set_end","","",46,{"inputs":[{"name":"record"},{"name":"u64"}],"output":null}],[11,"set_name","","",46,{"inputs":[{"name":"record"},{"name":"str"}],"output":null}],[11,"set_score","","",46,{"inputs":[{"name":"record"},{"name":"str"}],"output":null}],[11,"push_aux","","",46,{"inputs":[{"name":"record"},{"name":"str"}],"output":null}]],"paths":[[3,"Alphabet"],[3,"RankTransform"],[3,"RevComp"],[3,"QGrams"],[3,"ShiftAnd"],[3,"ShiftAndMatches"],[3,"KMP"],[3,"KMPMatches"],[3,"BOM"],[3,"BOMMatches"],[3,"Horspool"],[3,"HorspoolMatches"],[3,"BNDM"],[3,"BNDMMatches"],[3,"Ukkonen"],[3,"Matches"],[3,"RankSelect"],[3,"Occ"],[3,"BitEnc"],[3,"BitEncIter"],[3,"SmallInts"],[3,"Iter"],[3,"Interval"],[3,"FMIndex"],[3,"BiInterval"],[3,"FMDIndex"],[3,"Interval"],[3,"Match"],[3,"ExactMatch"],[3,"QGramIndex"],[3,"Alignment"],[4,"AlignmentOperation"],[3,"Aligner"],[3,"Reader"],[3,"Record"],[3,"Records"],[3,"Writer"],[3,"Reader"],[3,"IndexedReader"],[3,"Writer"],[3,"Record"],[3,"Records"],[4,"Strand"],[3,"Reader"],[3,"Records"],[3,"Writer"],[3,"Record"]]};
searchIndex['csv'] = {"items":[[0,"","csv","This crate provides a streaming CSV (comma separated values) writer and\nreader that works with the `serialize` crate to do type based encoding\nand decoding. There are two primary goals of this project:",null,null],[3,"ByteString","","A type that represents unadulterated byte strings.",null,null],[3,"Encoded","","A record to be encoded.",null,null],[3,"Decoded","","A record to be decoded.",null,null],[3,"Reader","","A CSV reader.",null,null],[3,"DecodedRecords","","An iterator of decoded records.",null,null],[3,"StringRecords","","An iterator of `String` records.",null,null],[3,"ByteRecords","","An iterator of `ByteString` records.",null,null],[3,"Writer","","A CSV writer.",null,null],[3,"ParseError","","A description of a CSV parse error.",null,null],[12,"line","","The line number of the parse error.",0,null],[12,"column","","The column (byte offset) of the parse error.",0,null],[12,"kind","","The type of parse error.",0,null],[4,"NextField","","NextField is the result of parsing a single CSV field.",null,null],[13,"Data","","A single CSV field as a borrow slice of bytes from the\nparser's internal buffer.",1,null],[13,"Error","","A CSV error found during parsing. When an error is found, it is\nfirst returned. All subsequent calls of `next_field` will return\n`EndOfCsv`. (EOF is exempt from this. Depending on the state of the\nparser, an EOF could trigger `Data`, `EndOfRecord` and `EndOfCsv`,\nall in succession.)",1,null],[13,"EndOfRecord","","Indicates the end of a record.",1,null],[13,"EndOfCsv","","Indicates the end of the CSV data. Once this state is entered, the\nparser can never leave it.",1,null],[4,"RecordTerminator","","A record terminator.",null,null],[13,"CRLF","","Parses `\\r`, `\\n` or `\\r\\n` as a single record terminator.",2,null],[13,"Any","","Parses the byte given as a record terminator.",2,null],[4,"QuoteStyle","","The quoting style to use when writing CSV data.",null,null],[13,"Always","","This puts quotes around every field. Always.",3,null],[13,"Necessary","","This puts quotes around fields only when necessary.",3,null],[13,"Never","","This *never* writes quotes.",3,null],[4,"Error","","An error produced by an operation on CSV data.",null,null],[13,"Encode","","An error reported by the type-based encoder.",4,null],[13,"Decode","","An error reported by the type-based decoder.",4,null],[13,"Parse","","An error reported by the CSV parser.",4,null],[13,"Io","","An error originating from reading or writing to the underlying buffer.",4,null],[13,"Index","","An error originating from using a CSV index.",4,null],[4,"ParseErrorKind","","The different types of parse errors.",null,null],[13,"UnequalLengths","","This error occurs when a record has a different number of fields\nthan the first record parsed.",5,null],[13,"InvalidUTF8","","This error occurs when parsing CSV data as Unicode.",5,null],[0,"index","","An experimental module for processing CSV data in parallel.",null,null],[3,"Indexed","csv::index","",null,null],[5,"create","","",null,{"inputs":[{"name":"reader"},{"name":"w"}],"output":{"name":"result"}}],[11,"new","","",6,{"inputs":[{"name":"indexed"},{"name":"reader"},{"name":"i"}],"output":{"name":"result"}}],[11,"seek","","",6,{"inputs":[{"name":"indexed"},{"name":"u64"}],"output":{"name":"result"}}],[11,"count","","",6,{"inputs":[{"name":"indexed"}],"output":{"name":"u64"}}],[11,"csv","","",6,{"inputs":[{"name":"indexed"}],"output":{"name":"reader"}}],[11,"borrow_bytes","collections::string","",7,null],[11,"borrow_bytes","collections::vec","",8,null],[11,"borrow_bytes","csv","",9,null],[11,"borrow_bytes","collections::borrow","",10,null],[11,"cmp","csv","",9,{"inputs":[{"name":"bytestring"},{"name":"bytestring"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"bytestring"},{"name":"bytestring"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"bytestring"},{"name":"bytestring"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"bytestring"},{"name":"bytestring"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"bytestring"},{"name":"bytestring"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"bytestring"},{"name":"bytestring"}],"output":{"name":"bool"}}],[11,"eq","","",9,{"inputs":[{"name":"bytestring"},{"name":"bytestring"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"bytestring"},{"name":"bytestring"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"bytestring"}],"output":{"name":"bytestring"}}],[11,"from_bytes","","Create a new byte string from a vector or slice of bytes.",9,{"inputs":[{"name":"bytestring"},{"name":"s"}],"output":{"name":"bytestring"}}],[11,"into_bytes","","Consumes this byte string into a vector of bytes.",9,{"inputs":[{"name":"bytestring"}],"output":{"name":"vec"}}],[11,"as_bytes","","Returns this byte string as a slice of bytes.",9,null],[11,"into_utf8_string","","Consumes the byte string and decodes it into a Unicode string. If the\ndecoding fails, then the original ByteString is returned.",9,{"inputs":[{"name":"bytestring"}],"output":{"name":"result"}}],[11,"len","","Return the number of bytes in the string.",9,{"inputs":[{"name":"bytestring"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the byte string is empty or not.",9,{"inputs":[{"name":"bytestring"}],"output":{"name":"bool"}}],[11,"fmt","","Writes the underlying bytes as a `&[u8]`.",9,{"inputs":[{"name":"bytestring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",9,null],[11,"index","","",9,null],[11,"index","","",9,null],[11,"index","","",9,null],[11,"index","","",9,null],[11,"hash","","",9,{"inputs":[{"name":"bytestring"},{"name":"h"}],"output":null}],[11,"eq","","",9,{"inputs":[{"name":"bytestring"},{"name":"s"}],"output":{"name":"bool"}}],[11,"from_iter","","",9,{"inputs":[{"name":"bytestring"},{"name":"i"}],"output":{"name":"bytestring"}}],[11,"borrow","","",9,null],[11,"new","","Creates a new encodable record. The value returned can be passed to\n`Encodable::encode`.",11,{"inputs":[{"name":"encoded"}],"output":{"name":"encoded"}}],[11,"unwrap","","Once a record has been encoded into this value, `unwrap` can be used\nto access the raw CSV record.",11,{"inputs":[{"name":"encoded"}],"output":{"name":"vec"}}],[11,"emit_nil","","",11,{"inputs":[{"name":"encoded"}],"output":{"name":"result"}}],[11,"emit_usize","","",11,{"inputs":[{"name":"encoded"},{"name":"usize"}],"output":{"name":"result"}}],[11,"emit_u64","","",11,{"inputs":[{"name":"encoded"},{"name":"u64"}],"output":{"name":"result"}}],[11,"emit_u32","","",11,{"inputs":[{"name":"encoded"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_u16","","",11,{"inputs":[{"name":"encoded"},{"name":"u16"}],"output":{"name":"result"}}],[11,"emit_u8","","",11,{"inputs":[{"name":"encoded"},{"name":"u8"}],"output":{"name":"result"}}],[11,"emit_isize","","",11,{"inputs":[{"name":"encoded"},{"name":"isize"}],"output":{"name":"result"}}],[11,"emit_i64","","",11,{"inputs":[{"name":"encoded"},{"name":"i64"}],"output":{"name":"result"}}],[11,"emit_i32","","",11,{"inputs":[{"name":"encoded"},{"name":"i32"}],"output":{"name":"result"}}],[11,"emit_i16","","",11,{"inputs":[{"name":"encoded"},{"name":"i16"}],"output":{"name":"result"}}],[11,"emit_i8","","",11,{"inputs":[{"name":"encoded"},{"name":"i8"}],"output":{"name":"result"}}],[11,"emit_bool","","",11,{"inputs":[{"name":"encoded"},{"name":"bool"}],"output":{"name":"result"}}],[11,"emit_f64","","",11,{"inputs":[{"name":"encoded"},{"name":"f64"}],"output":{"name":"result"}}],[11,"emit_f32","","",11,{"inputs":[{"name":"encoded"},{"name":"f32"}],"output":{"name":"result"}}],[11,"emit_char","","",11,{"inputs":[{"name":"encoded"},{"name":"char"}],"output":{"name":"result"}}],[11,"emit_str","","",11,{"inputs":[{"name":"encoded"},{"name":"str"}],"output":{"name":"result"}}],[11,"emit_enum","","",11,{"inputs":[{"name":"encoded"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_variant","","",11,{"inputs":[{"name":"encoded"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_variant_arg","","",11,{"inputs":[{"name":"encoded"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_struct_variant","","",11,{"inputs":[{"name":"encoded"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_struct_variant_field","","",11,{"inputs":[{"name":"encoded"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_struct","","",11,{"inputs":[{"name":"encoded"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_struct_field","","",11,{"inputs":[{"name":"encoded"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple","","",11,{"inputs":[{"name":"encoded"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_arg","","",11,{"inputs":[{"name":"encoded"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_struct","","",11,{"inputs":[{"name":"encoded"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_struct_arg","","",11,{"inputs":[{"name":"encoded"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_option","","",11,{"inputs":[{"name":"encoded"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_option_none","","",11,{"inputs":[{"name":"encoded"}],"output":{"name":"result"}}],[11,"emit_option_some","","",11,{"inputs":[{"name":"encoded"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_seq","","",11,{"inputs":[{"name":"encoded"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_seq_elt","","",11,{"inputs":[{"name":"encoded"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map","","",11,{"inputs":[{"name":"encoded"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map_elt_key","","",11,{"inputs":[{"name":"encoded"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map_elt_val","","",11,{"inputs":[{"name":"encoded"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"new","","Creates a new decodable record from a record of byte strings.",12,{"inputs":[{"name":"decoded"},{"name":"vec"}],"output":{"name":"decoded"}}],[11,"error","","",12,{"inputs":[{"name":"decoded"},{"name":"str"}],"output":{"name":"error"}}],[11,"read_nil","","",12,{"inputs":[{"name":"decoded"}],"output":{"name":"result"}}],[11,"read_usize","","",12,{"inputs":[{"name":"decoded"}],"output":{"name":"result"}}],[11,"read_u64","","",12,{"inputs":[{"name":"decoded"}],"output":{"name":"result"}}],[11,"read_u32","","",12,{"inputs":[{"name":"decoded"}],"output":{"name":"result"}}],[11,"read_u16","","",12,{"inputs":[{"name":"decoded"}],"output":{"name":"result"}}],[11,"read_u8","","",12,{"inputs":[{"name":"decoded"}],"output":{"name":"result"}}],[11,"read_isize","","",12,{"inputs":[{"name":"decoded"}],"output":{"name":"result"}}],[11,"read_i64","","",12,{"inputs":[{"name":"decoded"}],"output":{"name":"result"}}],[11,"read_i32","","",12,{"inputs":[{"name":"decoded"}],"output":{"name":"result"}}],[11,"read_i16","","",12,{"inputs":[{"name":"decoded"}],"output":{"name":"result"}}],[11,"read_i8","","",12,{"inputs":[{"name":"decoded"}],"output":{"name":"result"}}],[11,"read_bool","","",12,{"inputs":[{"name":"decoded"}],"output":{"name":"result"}}],[11,"read_f64","","",12,{"inputs":[{"name":"decoded"}],"output":{"name":"result"}}],[11,"read_f32","","",12,{"inputs":[{"name":"decoded"}],"output":{"name":"result"}}],[11,"read_char","","",12,{"inputs":[{"name":"decoded"}],"output":{"name":"result"}}],[11,"read_str","","",12,{"inputs":[{"name":"decoded"}],"output":{"name":"result"}}],[11,"read_enum","","",12,{"inputs":[{"name":"decoded"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_variant","","",12,null],[11,"read_enum_variant_arg","","",12,{"inputs":[{"name":"decoded"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_struct_variant","","",12,null],[11,"read_enum_struct_variant_field","","",12,{"inputs":[{"name":"decoded"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct","","",12,{"inputs":[{"name":"decoded"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct_field","","",12,{"inputs":[{"name":"decoded"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple","","",12,{"inputs":[{"name":"decoded"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_arg","","",12,{"inputs":[{"name":"decoded"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct","","",12,{"inputs":[{"name":"decoded"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct_arg","","",12,{"inputs":[{"name":"decoded"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_option","","",12,{"inputs":[{"name":"decoded"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq","","",12,{"inputs":[{"name":"decoded"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq_elt","","",12,{"inputs":[{"name":"decoded"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map","","",12,{"inputs":[{"name":"decoded"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_key","","",12,{"inputs":[{"name":"decoded"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_val","","",12,{"inputs":[{"name":"decoded"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"recordterminator"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"from_reader","","Creates a new CSV reader from an arbitrary `io::Read`.",13,{"inputs":[{"name":"reader"},{"name":"r"}],"output":{"name":"reader"}}],[11,"from_file","","Creates a new CSV reader for the data at the file path given.",13,{"inputs":[{"name":"reader"},{"name":"p"}],"output":{"name":"result"}}],[11,"from_string","","Creates a CSV reader for an in memory string buffer.",13,{"inputs":[{"name":"reader"},{"name":"s"}],"output":{"name":"reader"}}],[11,"from_bytes","","Creates a CSV reader for an in memory buffer of bytes.",13,{"inputs":[{"name":"reader"},{"name":"v"}],"output":{"name":"reader"}}],[11,"decode","","Uses type-based decoding to read a single record from CSV data.",13,{"inputs":[{"name":"reader"}],"output":{"name":"decodedrecords"}}],[11,"records","","Returns an iterator of records in the CSV data where each field is\na `String`.",13,{"inputs":[{"name":"reader"}],"output":{"name":"stringrecords"}}],[11,"headers","","Returns a *copy* of the first record in the CSV data as strings.",13,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"delimiter","","The delimiter to use when reading CSV data.",13,{"inputs":[{"name":"reader"},{"name":"u8"}],"output":{"name":"reader"}}],[11,"has_headers","","Whether to treat the first row as a special header row.",13,{"inputs":[{"name":"reader"},{"name":"bool"}],"output":{"name":"reader"}}],[11,"flexible","","Whether to allow flexible length records when reading CSV data.",13,{"inputs":[{"name":"reader"},{"name":"bool"}],"output":{"name":"reader"}}],[11,"record_terminator","","Set the record terminator to use when reading CSV data.",13,{"inputs":[{"name":"reader"},{"name":"recordterminator"}],"output":{"name":"reader"}}],[11,"quote","","Set the quote character to use when reading CSV data.",13,{"inputs":[{"name":"reader"},{"name":"option"}],"output":{"name":"reader"}}],[11,"escape","","Set the escape character to use when reading CSV data.",13,{"inputs":[{"name":"reader"},{"name":"u8"}],"output":{"name":"reader"}}],[11,"double_quote","","Set the quoting escape mechanism.",13,{"inputs":[{"name":"reader"},{"name":"bool"}],"output":{"name":"reader"}}],[11,"ascii","","A convenience method for reading ASCII delimited text.",13,{"inputs":[{"name":"reader"}],"output":{"name":"reader"}}],[11,"into_iter_result","","Transform NextField into an iterator result.",1,{"inputs":[{"name":"nextfield"}],"output":{"name":"option"}}],[11,"is_end","","Returns true if and only if the end of CSV data has been reached.",1,{"inputs":[{"name":"nextfield"}],"output":{"name":"bool"}}],[11,"byte_headers","","This is just like `headers`, except fields are `ByteString`s instead\nof `String`s.",13,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"byte_records","","This is just like `records`, except fields are `ByteString`s instead\nof `String`s.",13,{"inputs":[{"name":"reader"}],"output":{"name":"byterecords"}}],[11,"done","","Returns `true` if the CSV parser has reached its final state. When\nthis method returns `true`, all iterators will always return `None`.",13,{"inputs":[{"name":"reader"}],"output":{"name":"bool"}}],[11,"next_field","","An iterator over fields in the current record.",13,{"inputs":[{"name":"reader"}],"output":{"name":"nextfield"}}],[11,"line","","Returns the line at which the current record started.",13,{"inputs":[{"name":"reader"}],"output":{"name":"u64"}}],[11,"byte_offset","","Returns the byte offset at which the current record started.",13,{"inputs":[{"name":"reader"}],"output":{"name":"u64"}}],[11,"seek","","Seeks the underlying reader to the file cursor specified.",13,{"inputs":[{"name":"reader"},{"name":"u64"}],"output":{"name":"result"}}],[11,"next","","",14,{"inputs":[{"name":"decodedrecords"}],"output":{"name":"option"}}],[11,"next","","",15,{"inputs":[{"name":"stringrecords"}],"output":{"name":"option"}}],[11,"next","","",16,{"inputs":[{"name":"byterecords"}],"output":{"name":"option"}}],[11,"from_file","","Creates a new `Writer` that writes CSV data to the file path given.",17,{"inputs":[{"name":"writer"},{"name":"p"}],"output":{"name":"result"}}],[11,"from_writer","","Creates a new CSV writer that writes to the `io::Write` given.",17,{"inputs":[{"name":"writer"},{"name":"w"}],"output":{"name":"writer"}}],[11,"from_buffer","","Creates a new CSV writer that writes to the buffer given.",17,{"inputs":[{"name":"writer"},{"name":"bufwriter"}],"output":{"name":"writer"}}],[11,"from_memory","","Creates a new CSV writer that writes to an in memory buffer. At any\ntime, `to_string` or `to_bytes` can be called to retrieve the\ncumulative CSV data.",17,{"inputs":[{"name":"writer"}],"output":{"name":"writer"}}],[11,"as_string","","Returns the written CSV data as a string.",17,{"inputs":[{"name":"writer"}],"output":{"name":"str"}}],[11,"as_bytes","","Returns the encoded CSV data as raw bytes.",17,null],[11,"encode","","Writes a record by encoding any `Encodable` value.",17,{"inputs":[{"name":"writer"},{"name":"e"}],"output":{"name":"result"}}],[11,"write","","Writes a record of strings (Unicode or raw bytes).",17,{"inputs":[{"name":"writer"},{"name":"i"}],"output":{"name":"result"}}],[11,"flush","","Flushes the underlying buffer.",17,{"inputs":[{"name":"writer"}],"output":{"name":"result"}}],[11,"delimiter","","The delimiter to use when writing CSV data.",17,{"inputs":[{"name":"writer"},{"name":"u8"}],"output":{"name":"writer"}}],[11,"flexible","","Whether to allow flexible length records when writing CSV data.",17,{"inputs":[{"name":"writer"},{"name":"bool"}],"output":{"name":"writer"}}],[11,"record_terminator","","Sets the record terminator to use when writing CSV data.",17,{"inputs":[{"name":"writer"},{"name":"recordterminator"}],"output":{"name":"writer"}}],[11,"quote_style","","Set the quoting style to use when writing CSV data.",17,{"inputs":[{"name":"writer"},{"name":"quotestyle"}],"output":{"name":"writer"}}],[11,"quote","","Set the quote character to use when writing CSV data.",17,{"inputs":[{"name":"writer"},{"name":"u8"}],"output":{"name":"writer"}}],[11,"escape","","Set the escape character to use when writing CSV data.",17,{"inputs":[{"name":"writer"},{"name":"u8"}],"output":{"name":"writer"}}],[11,"double_quote","","Set the quoting escape mechanism.",17,{"inputs":[{"name":"writer"},{"name":"bool"}],"output":{"name":"writer"}}],[6,"Result","","A convenience type for representing the result of most CSV reader/writer\noperations.",null,null],[8,"BorrowBytes","","A trait that permits borrowing byte vectors.",null,null],[10,"borrow_bytes","","Borrow a byte vector.",18,null],[11,"fmt","","",4,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",0,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",5,{"inputs":[{"name":"parseerrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"parseerrorkind"}],"output":{"name":"parseerrorkind"}}],[11,"fmt","","",4,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"parseerrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",4,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"from_error","","",4,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"from_error","","",4,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}]],"paths":[[3,"ParseError"],[4,"NextField"],[4,"RecordTerminator"],[4,"QuoteStyle"],[4,"Error"],[4,"ParseErrorKind"],[3,"Indexed"],[3,"String"],[3,"Vec"],[3,"ByteString"],[4,"Cow"],[3,"Encoded"],[3,"Decoded"],[3,"Reader"],[3,"DecodedRecords"],[3,"StringRecords"],[3,"ByteRecords"],[3,"Writer"],[8,"BorrowBytes"]]};
searchIndex['rustc-serialize'] = {"items":[[0,"","rustc-serialize","Support code for encoding and decoding types.",null,null],[11,"encode","collections::string","",0,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"string"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",1,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",2,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"rc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",3,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"vec"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",4,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"option"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",5,{"inputs":[{"name":"phantomdata"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"phantomdata"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",6,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",7,{"inputs":[{"name":"pathbuf"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",8,{"inputs":[{"name":"cell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"cell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",9,{"inputs":[{"name":"refcell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"refcell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",10,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"arc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",11,{"inputs":[{"name":"linkedlist"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"linkedlist"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",12,{"inputs":[{"name":"vecdeque"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",12,{"inputs":[{"name":"vecdeque"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",13,{"inputs":[{"name":"btreemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"btreemap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",14,{"inputs":[{"name":"btreeset"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"btreeset"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",15,{"inputs":[{"name":"hashmap"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"hashmap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",16,{"inputs":[{"name":"hashset"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",16,{"inputs":[{"name":"hashset"},{"name":"d"}],"output":{"name":"result"}}],[0,"base64","rustc-serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc-serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",17,null],[12,"newline","","Newline to use",17,null],[12,"pad","","True to pad output with `=` characters",17,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",17,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",18,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",18,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",19,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",19,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",20,null],[13,"InvalidBase64Length","","The input had an invalid length",20,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",21,{"inputs":[{"name":"tobase64"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",22,{"inputs":[{"name":"frombase64"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",20,{"inputs":[{"name":"frombase64error"}],"output":{"name":"str"}}],[11,"fmt","","",20,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc-serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc-serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",23,null],[13,"InvalidHexLength","","The input had an invalid length",23,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",24,{"inputs":[{"name":"tohex"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",25,{"inputs":[{"name":"fromhex"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",23,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"str"}}],[11,"fmt","","",23,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc-serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc-serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",26,null],[13,"U64","","",26,null],[13,"F64","","",26,null],[13,"String","","",26,null],[13,"Boolean","","",26,null],[13,"Array","","",26,null],[13,"Object","","",26,null],[13,"Null","","",26,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",27,null],[13,"InvalidNumber","","",27,null],[13,"EOFWhileParsingObject","","",27,null],[13,"EOFWhileParsingArray","","",27,null],[13,"EOFWhileParsingValue","","",27,null],[13,"EOFWhileParsingString","","",27,null],[13,"KeyMustBeAString","","",27,null],[13,"ExpectedColon","","",27,null],[13,"TrailingCharacters","","",27,null],[13,"TrailingComma","","",27,null],[13,"InvalidEscape","","",27,null],[13,"InvalidUnicodeCodePoint","","",27,null],[13,"LoneLeadingSurrogateInHexEscape","","",27,null],[13,"UnexpectedEndOfHexEscape","","",27,null],[13,"UnrecognizedHex","","",27,null],[13,"NotFourDigit","","",27,null],[13,"ControlCharacterInString","","",27,null],[13,"NotUtf8","","",27,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",28,null],[13,"IoError","","",28,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",29,null],[13,"ExpectedError","","",29,null],[13,"MissingFieldError","","",29,null],[13,"UnknownVariantError","","",29,null],[13,"ApplicationError","","",29,null],[13,"EOF","","",29,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",30,null],[13,"BadHashmapKey","","",30,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",31,null],[13,"ObjectEnd","","",31,null],[13,"ArrayStart","","",31,null],[13,"ArrayEnd","","",31,null],[13,"BooleanValue","","",31,null],[13,"I64Value","","",31,null],[13,"U64Value","","",31,null],[13,"F64Value","","",31,null],[13,"StringValue","","",31,null],[13,"NullValue","","",31,null],[13,"Error","","",31,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",32,null],[13,"Key","","",32,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",33,{"inputs":[{"name":"tojson"}],"output":{"name":"json"}}],[11,"fmt","","",26,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"eq","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"eq","","",27,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"errorcode"}],"output":{"name":"errorcode"}}],[11,"fmt","","",28,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"parsererror"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"parsererror"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"parsererror"}],"output":{"name":"parsererror"}}],[11,"fmt","","",29,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"decodererror"}],"output":{"name":"decodererror"}}],[11,"fmt","","",30,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"errorcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",29,{"inputs":[{"name":"decodererror"}],"output":{"name":"str"}}],[11,"cause","","",29,{"inputs":[{"name":"decodererror"}],"output":{"name":"option"}}],[11,"fmt","","",29,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",28,{"inputs":[{"name":"parsererror"}],"output":{"name":"str"}}],[11,"fmt","","",28,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",30,{"inputs":[{"name":"encodererror"}],"output":{"name":"str"}}],[11,"fmt","","",30,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_error","","",30,{"inputs":[{"name":"encodererror"},{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",34,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",34,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",34,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[6,"Error","","",null,null],[11,"emit_nil","","",34,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",34,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",34,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",34,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",34,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",34,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",34,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",34,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",34,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",34,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",34,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",34,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",34,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",34,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",34,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",34,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",34,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",34,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",26,{"inputs":[{"name":"json"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",26,{"inputs":[{"name":"json"},{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",26,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",26,{"inputs":[{"name":"json"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",26,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",26,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",26,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[6,"Output","","",null,null],[11,"index","","",26,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"json"}}],[6,"Output","","",null,null],[11,"index","","",26,{"inputs":[{"name":"json"},{"name":"usize"}],"output":{"name":"json"}}],[11,"fmt","","",31,{"inputs":[{"name":"jsonevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"jsonevent"}],"output":{"name":"jsonevent"}}],[11,"eq","","",31,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",32,{"inputs":[{"name":"stackelement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"stackelement"}],"output":{"name":"stackelement"}}],[11,"eq","","",32,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"new","","",35,{"inputs":[{"name":"stack"}],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",35,{"inputs":[{"name":"stack"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",35,{"inputs":[{"name":"stack"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",35,{"inputs":[{"name":"stack"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",35,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",35,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",35,null],[11,"top","","Returns the top-most element (if any).",35,{"inputs":[{"name":"stack"}],"output":{"name":"option"}}],[6,"Item","","",null,null],[11,"next","","",36,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",36,{"inputs":[{"name":"parser"},{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",36,{"inputs":[{"name":"parser"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",37,{"inputs":[{"name":"builder"},{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",37,{"inputs":[{"name":"builder"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",38,{"inputs":[{"name":"decoder"},{"name":"json"}],"output":{"name":"decoder"}}],[6,"Error","","",null,null],[11,"read_nil","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",38,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",38,null],[11,"read_enum_variant_arg","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",38,null],[11,"read_enum_struct_variant_field","","",38,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",38,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",38,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",38,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",38,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",38,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",38,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",38,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",26,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"to_json","collections::string","",0,{"inputs":[{"name":"string"}],"output":{"name":"json"}}],[11,"to_json","collections::vec","",3,{"inputs":[{"name":"vec"}],"output":{"name":"json"}}],[11,"to_json","collections::btree::map","",13,{"inputs":[{"name":"btreemap"}],"output":{"name":"json"}}],[11,"to_json","std::collections::hash::map","",15,{"inputs":[{"name":"hashmap"}],"output":{"name":"json"}}],[11,"to_json","core::option","",4,{"inputs":[{"name":"option"}],"output":{"name":"json"}}],[11,"fmt","rustc-serialize::json","Encodes a json value into a string",26,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",39,{"inputs":[{"name":"prettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",40,{"inputs":[{"name":"asjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",41,{"inputs":[{"name":"asprettyjson"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",41,{"inputs":[{"name":"asprettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Err","","",null,null],[11,"from_str","","",26,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[11,"encode","collections::string","",0,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"string"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",1,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",2,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"rc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",3,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"vec"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",4,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"option"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",5,{"inputs":[{"name":"phantomdata"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"phantomdata"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",6,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",7,{"inputs":[{"name":"pathbuf"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",8,{"inputs":[{"name":"cell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"cell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",9,{"inputs":[{"name":"refcell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"refcell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",10,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"arc"},{"name":"d"}],"output":{"name":"result"}}],[8,"Decoder","rustc-serialize","",null,null],[16,"Error","rustc-serialize::Decoder","",null,null],[10,"read_nil","rustc-serialize","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_usize","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u64","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u32","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u16","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u8","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_isize","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i64","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i32","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i16","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i8","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_bool","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f64","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f32","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_char","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_str","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_enum","","",42,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","",42,null],[10,"read_enum_variant_arg","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","",42,null],[10,"read_enum_struct_variant_field","","",42,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","",42,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","",42,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","",42,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","",42,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","",42,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","",42,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","",42,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"error"}}],[8,"Encoder","","",null,null],[16,"Error","rustc-serialize::Encoder","",null,null],[10,"emit_nil","rustc-serialize","",43,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_usize","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","",43,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","",43,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","",43,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","",43,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","",43,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","",43,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","",43,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","",43,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","",43,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","",43,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","",43,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","",43,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","",43,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","",43,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","",43,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","",43,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_option_some","","",43,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","",null,null],[10,"decode","","",44,{"inputs":[{"name":"decodable"},{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",45,{"inputs":[{"name":"encodable"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",46,{"inputs":[{"name":"decoderhelpers"},{"name":"f"}],"output":{"name":"result"}}],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",47,null]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[3,"Vec"],[4,"Option"],[3,"PhantomData"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex['byteorder'] = {"items":[[0,"","byteorder","This crate provides convenience methods for encoding and decoding numbers\nin either big-endian or little-endian order.",null,null],[4,"Error","","An error type for reading bytes.",null,null],[13,"UnexpectedEOF","","An unexpected EOF.",0,null],[13,"Io","","Any underlying IO error that occurs while reading bytes.",0,null],[4,"BigEndian","","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[11,"eq","","",0,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from_error","","",0,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"from_error","std::io::error","",1,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","byteorder","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[6,"Result","","A short-hand for `result::Result<T, byteorder::Error>`.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",4,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",4,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",4,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",4,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",4,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",4,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",4,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",4,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",4,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",4,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",4,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",4,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",4,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",4,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",4,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",4,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",4,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",4,null],[11,"read_u16","","",5,null],[11,"read_u32","","",5,null],[11,"read_u64","","",5,null],[11,"read_uint","","",5,null],[11,"write_u16","","",5,null],[11,"write_u32","","",5,null],[11,"write_u64","","",5,null],[11,"read_u16","","",6,null],[11,"read_u32","","",6,null],[11,"read_u64","","",6,null],[11,"read_uint","","",6,null],[11,"write_u16","","",6,null],[11,"write_u32","","",6,null],[11,"write_u64","","",6,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",2,null],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",2,null],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",2,null],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",2,null],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",2,null],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",2,null],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",2,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",3,null],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",3,null],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",3,null],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",3,null],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",3,null],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",3,null],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",3,null],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",3,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",3,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",3,null]],"paths":[[4,"Error"],[3,"Error"],[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex['bswap'] = {"items":[[0,"","bswap","",null,null],[0,"u8","","Swap bytes for `u8` slices on all targets.",null,null],[5,"align_of_ptr","bswap::u8","TODO",null,null],[5,"reverse_slice_inplace","","TODO",null,null],[5,"reverse_slice","","TODO",null,null],[5,"reverse_memory_inplace","","TODO",null,null],[5,"reverse_memory","","TODO",null,null],[5,"reverse_memory_array_inplace","","",null,null],[5,"reverse_memory_array","","",null,null],[17,"BYTES","","",null,null],[0,"u16","bswap","Swap bytes for `u16` objects on all targets.",null,null],[5,"swap_memory_inplace","bswap::u16","TODO",null,null],[5,"swap_memory","","TODO",null,null],[17,"BYTES","","",null,null],[0,"u24","bswap","Swap bytes for `[u8; 3]` objects on all targets.",null,null],[5,"swap_memory_inplace","bswap::u24","",null,null],[5,"swap_memory","","",null,null],[17,"BYTES","","",null,null],[0,"u40","bswap","Swap bytes for `[u8; 5]` objects on all targets.",null,null],[5,"swap_memory_inplace","bswap::u40","",null,null],[5,"swap_memory","","",null,null],[17,"BYTES","","",null,null],[0,"u48","bswap","Swap bytes for `[u8; 6]` objects on all targets.",null,null],[5,"swap_memory_inplace","bswap::u48","",null,null],[5,"swap_memory","","",null,null],[17,"BYTES","","",null,null],[0,"u56","bswap","Swap bytes for `[u8; 7]` objects on all targets.",null,null],[5,"swap_memory_inplace","bswap::u56","",null,null],[5,"swap_memory","","",null,null],[17,"BYTES","","",null,null],[0,"u32","bswap","Swap bytes for `u32` objects on all targets.",null,null],[5,"swap_memory_inplace","bswap::u32","Swaps `len*4` bytes for `u32` objects inplace in `buf`.",null,null],[5,"swap_memory","","Swaps `len*4` bytes for `u32` objects from `src` to `dst`. The source and destination may not overlap.",null,null],[17,"BYTES","","",null,null],[0,"u64","bswap","Swap bytes for `u64` objects on all targets.",null,null],[5,"swap_memory_inplace","bswap::u64","Swaps `len*8` bytes for `u64` objects inplace in `buf`.",null,null],[5,"swap_memory","","Swaps `len*8` bytes for `u64` objects from `src` to `dst`. The source and destination may not overlap.",null,null],[17,"BYTES","","",null,null],[0,"beusize","bswap","",null,null],[5,"decode","bswap::beusize","",null,null],[5,"encode","","",null,null],[0,"leusize","bswap","",null,null],[5,"decode","bswap::leusize","",null,null],[5,"encode","","",null,null],[0,"beu16","bswap","Swap bytes for `u16` objects only on little-endian targets, does nothing on big-endian targets.",null,null],[5,"decode","bswap::beu16","Decodes $E-endian bytes to a native-endian $T object.",null,null],[5,"decode_slice","","Decodes $E-endian bytes to a slice of native-endian $T objects.",null,null],[5,"encode","","Encodes a native-endian $T object to $E-endian bytes.",null,null],[5,"encode_slice","","Encodes a slice of native-endian $T objects to $E-endian bytes.",null,null],[0,"beu24","bswap","Swap bytes for `[u8; 3]` objects only on little-endian targets, does nothing on big-endian targets.",null,null],[5,"decode","bswap::beu24","Decodes $E-endian bytes to a native-endian $T object.",null,null],[5,"decode_slice","","Decodes $E-endian bytes to a slice of native-endian $T objects.",null,null],[5,"encode","","Encodes a native-endian $T object to $E-endian bytes.",null,null],[5,"encode_slice","","Encodes a slice of native-endian $T objects to $E-endian bytes.",null,null],[0,"beu32","bswap","Swap bytes for `u32` objects only on little-endian targets, does nothing on big-endian targets.",null,null],[5,"decode","bswap::beu32","Decodes $E-endian bytes to a native-endian $T object.",null,null],[5,"decode_slice","","Decodes $E-endian bytes to a slice of native-endian $T objects.",null,null],[5,"encode","","Encodes a native-endian $T object to $E-endian bytes.",null,null],[5,"encode_slice","","Encodes a slice of native-endian $T objects to $E-endian bytes.",null,null],[0,"beu40","bswap","Swap bytes for `[u8; 5]` objects only on little-endian targets, does nothing on big-endian targets.",null,null],[5,"decode","bswap::beu40","Decodes $E-endian bytes to a native-endian $T object.",null,null],[5,"decode_slice","","Decodes $E-endian bytes to a slice of native-endian $T objects.",null,null],[5,"encode","","Encodes a native-endian $T object to $E-endian bytes.",null,null],[5,"encode_slice","","Encodes a slice of native-endian $T objects to $E-endian bytes.",null,null],[0,"beu48","bswap","Swap bytes for `[u8; 6]` objects only on little-endian targets, does nothing on big-endian targets.",null,null],[5,"decode","bswap::beu48","Decodes $E-endian bytes to a native-endian $T object.",null,null],[5,"decode_slice","","Decodes $E-endian bytes to a slice of native-endian $T objects.",null,null],[5,"encode","","Encodes a native-endian $T object to $E-endian bytes.",null,null],[5,"encode_slice","","Encodes a slice of native-endian $T objects to $E-endian bytes.",null,null],[0,"beu56","bswap","Swap bytes for `[u8; 7]` objects only on little-endian targets, does nothing on big-endian targets.",null,null],[5,"decode","bswap::beu56","Decodes $E-endian bytes to a native-endian $T object.",null,null],[5,"decode_slice","","Decodes $E-endian bytes to a slice of native-endian $T objects.",null,null],[5,"encode","","Encodes a native-endian $T object to $E-endian bytes.",null,null],[5,"encode_slice","","Encodes a slice of native-endian $T objects to $E-endian bytes.",null,null],[0,"beu64","bswap","Swap bytes for `u64` objects only on little-endian targets, does nothing on big-endian targets.",null,null],[5,"decode","bswap::beu64","Decodes $E-endian bytes to a native-endian $T object.",null,null],[5,"decode_slice","","Decodes $E-endian bytes to a slice of native-endian $T objects.",null,null],[5,"encode","","Encodes a native-endian $T object to $E-endian bytes.",null,null],[5,"encode_slice","","Encodes a slice of native-endian $T objects to $E-endian bytes.",null,null],[0,"leu16","bswap","Swap bytes for `u16` objects only on big-endian targets, does nothing on little-endian targets.",null,null],[5,"decode","bswap::leu16","Decodes $E-endian bytes to a native-endian $T object.",null,null],[5,"decode_slice","","Decodes $E-endian bytes to a slice of native-endian $T objects.",null,null],[5,"encode","","Encodes a native-endian $T object to $E-endian bytes.",null,null],[5,"encode_slice","","Encodes a slice of native-endian $T objects to $E-endian bytes.",null,null],[0,"leu24","bswap","Swap bytes for `[u8; 3]` objects only on big-endian targets, does nothing on little-endian targets.",null,null],[5,"decode","bswap::leu24","Decodes $E-endian bytes to a native-endian $T object.",null,null],[5,"decode_slice","","Decodes $E-endian bytes to a slice of native-endian $T objects.",null,null],[5,"encode","","Encodes a native-endian $T object to $E-endian bytes.",null,null],[5,"encode_slice","","Encodes a slice of native-endian $T objects to $E-endian bytes.",null,null],[0,"leu32","bswap","Swap bytes for `u32` objects only on big-endian targets, does nothing on little-endian targets.",null,null],[5,"decode","bswap::leu32","Decodes $E-endian bytes to a native-endian $T object.",null,null],[5,"decode_slice","","Decodes $E-endian bytes to a slice of native-endian $T objects.",null,null],[5,"encode","","Encodes a native-endian $T object to $E-endian bytes.",null,null],[5,"encode_slice","","Encodes a slice of native-endian $T objects to $E-endian bytes.",null,null],[0,"leu40","bswap","Swap bytes for `[u8; 5]` objects only on big-endian targets, does nothing on little-endian targets.",null,null],[5,"decode","bswap::leu40","Decodes $E-endian bytes to a native-endian $T object.",null,null],[5,"decode_slice","","Decodes $E-endian bytes to a slice of native-endian $T objects.",null,null],[5,"encode","","Encodes a native-endian $T object to $E-endian bytes.",null,null],[5,"encode_slice","","Encodes a slice of native-endian $T objects to $E-endian bytes.",null,null],[0,"leu48","bswap","Swap bytes for `[u8; 6]` objects only on big-endian targets, does nothing on little-endian targets.",null,null],[5,"decode","bswap::leu48","Decodes $E-endian bytes to a native-endian $T object.",null,null],[5,"decode_slice","","Decodes $E-endian bytes to a slice of native-endian $T objects.",null,null],[5,"encode","","Encodes a native-endian $T object to $E-endian bytes.",null,null],[5,"encode_slice","","Encodes a slice of native-endian $T objects to $E-endian bytes.",null,null],[0,"leu56","bswap","Swap bytes for `[u8; 7]` objects only on big-endian targets, does nothing on little-endian targets.",null,null],[5,"decode","bswap::leu56","Decodes $E-endian bytes to a native-endian $T object.",null,null],[5,"decode_slice","","Decodes $E-endian bytes to a slice of native-endian $T objects.",null,null],[5,"encode","","Encodes a native-endian $T object to $E-endian bytes.",null,null],[5,"encode_slice","","Encodes a slice of native-endian $T objects to $E-endian bytes.",null,null],[0,"leu64","bswap","Swap bytes for `u64` objects only on big-endian targets, does nothing on little-endian targets.",null,null],[5,"decode","bswap::leu64","Decodes $E-endian bytes to a native-endian $T object.",null,null],[5,"decode_slice","","Decodes $E-endian bytes to a slice of native-endian $T objects.",null,null],[5,"encode","","Encodes a native-endian $T object to $E-endian bytes.",null,null],[5,"encode_slice","","Encodes a slice of native-endian $T objects to $E-endian bytes.",null,null]],"paths":[]};
initSearch(searchIndex);
